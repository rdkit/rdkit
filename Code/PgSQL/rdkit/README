PgSQL/rdkit is a PostgreSQL contribution module, which implements 
*mol* datatype to describe molecules and *fp* datatype for fingerprints,  
basic comparison operations, similarity operation (tanimoto, dice) and  index 
support (using GiST indexing framework).

Compatibility: PostgreSQL 9.1+
 If using PostgreSQL packages from your linux distribution, be sure
 that you have the -devel package installed.

Installation:
if PostgreSQL is installed in a location where CMake is unable to find it,
either set the environment variable PostgreSQL_ROOT or add a
"-DPostgreSQL_ROOT" switch to the cmake command line, pointing to the
PostgreSQL root directory, e.g. C:\Program Files (x86)\PostgreSQL\9.5

==========================================================================
Win32-specific installation info
--------------------------------

After building the RDKit, carry out the following steps:
1) Open a CMD shell with administrator privileges
2) Stop the PostgreSQL service, e.g.:
   "C:\Program Files (x86)\PostgreSQL\9.5\bin\pg_ctl.exe" ^
   -N "postgresql-9.5"  -D "C:\Program Files (x86)\PostgreSQL\9.5\data" ^
   -w stop
3) run the BAT script
   
   
   
   which will copy rdkit.sql91.in, rdkit--3.4.sql,
   rdkit.control and rdkit.dll into you PostgreSQL installation
4) Make sure that the Boost DLLs the RDKit is built against are in the
   SYSTEM path, or PostgreSQL will fail to create the rdkit extension with
   a deceptive error message, e.g.:

   ERROR:  could not load library
   "C:/Program Files (x86)/PostgreSQL/9.5/lib/rdkit.dll":
   The specified module could not be found.

5) Start the PostgreSQL service, e.g.:
   "C:\Program Files (x86)\PostgreSQL\9.5\bin\pg_ctl.exe" ^
   -N "postgresql-9.5"  -D "C:\Program Files (x86)\PostgreSQL\9.5\data" ^
   -w start
==========================================================================

To install rdkit cartridge into the database DB: 
 psql -c 'CREATE EXTENSION rdkit' DB

Uninstall cartridge from database DB:
 psql -c 'DROP EXTENSION rdkit CASCADE' DB

Data types:

Input/output functions for *mol* datatype follow SMILES format.
Input/output functions for *fp* datatype follow bytea format.

It's possible to use implicit cast mol to fp, i.e., mol::fp

Functions:

double tanimoto_sml(mol,mol) - calculates tanimoto similarity
double tanimoto_sml(fp,fp)

double dice_sml(mol,mol)     - calculates dice similarity
double dice_sml(fp,fp)     

bool substruct(mol a, mol b)  - returns TRUE if second argument is a 
                                substructure of the first argument.

size(fp) - calculates length of fingerprint


GUC variables rdkit.tanimoto_threshold, rdkit.dice_threshold should be
defined, see shared_preload_libraries', 'custom_variable_classes' 
instructions in postgresql.conf. Default value for both of them is 0.5. 
We recommend to initialize them via  'shared_preload_libraries'.

Operations:

  mol % mol, fp % fp  - returns TRUE if tanimoto similarity between operands is 
                        lower than rdkit.tanimoto_threshold
  
  mol # mol, fp # fp  - returns TRUE if dice similarity between operands is 
                        lower than rdkit.dice_threshold
 
  mol @> mol          - returns TRUE if left operand contains right one
  mol <@ mol          - returns TRUE if left operand contained in right one
 
  comparison operations ( <, <=, =, >=, > )  were implemented using memcpy()

Indexes:

  Btree and Hash indexes support comparison operations for mol and fp 
  datatypes. 
  Example:  CREATE INDEX molidx ON pgmol (mol);
            CREATE INDEX molidx ON pgmol (fp);

  GiST index over mol supports %,#, @>, <@ operations.
  GiST index over fp supports %,# operations.
  Example:  CREATE INDEX molidx ON pgmol USING gist (mol);


Example:

  See sql/* for examples.
