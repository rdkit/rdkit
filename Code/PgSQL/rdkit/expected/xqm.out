-- parsing and conversion to text
select mol_to_tautomerquery('Cc1n[nH]c(F)c1'::mol);
                           mol_to_tautomerquery                            
---------------------------------------------------------------------------
 {                                                                        +
     "xqm_type": "3",                                                     +
     "tautomers": [                                                       +
         "Cc1cc(F)[nH]n1",                                                +
         "Cc1cc(F)n[nH]1"                                                 +
     ],                                                                   +
     "modifiedAtoms": [                                                   +
         "2",                                                             +
         "3"                                                              +
     ],                                                                   +
     "modifiedBonds": [                                                   +
         "1",                                                             +
         "3",                                                             +
         "5",                                                             +
         "6"                                                              +
     ],                                                                   +
     "template": "[#6]-[#6]1-,=,:[#7]:[#7]-,=,:[#6](-[#9])-,=,:[#6]-,=,:1"+
 }                                                                        +
 
(1 row)

select mol_enumeratequery('COC |LN:1:1.3|'::mol);
WARNING:  create bndl 3
WARNING:  depickle bndl 3
  mol_enumeratequery  
----------------------
 {                   +
     "xqm_type": "2",+
     "mols": [       +
         "COC",      +
         "COOC",     +
         "COOOC"     +
     ]               +
 }                   +
 
(1 row)

-- substructure searching
select 'Cc1[nH]nc(F)c1'::mol @> mol_to_tautomerquery('Cc1n[nH]c(F)c1'::mol);
 ?column? 
----------
 t
(1 row)

select substruct('Cc1[nH]nc(F)c1'::mol,mol_to_tautomerquery('Cc1n[nH]c(F)c1'::mol));
 substruct 
-----------
 t
(1 row)

select substruct('Cc1[nH]nc(F)c1'::mol,mol_to_tautomerquery('Cc1n[nH]c(F)n1'::mol));
 substruct 
-----------
 f
(1 row)

select substruct('COC'::mol,'COC |LN:1:1.3|'::mol);
 substruct 
-----------
 t
(1 row)

select substruct('COC'::mol,mol_enumeratequery('COC |LN:1:1.3|'::mol));
WARNING:  create bndl 3
WARNING:  depickle bndl 3
WARNING:  bndl 3
 substruct 
-----------
 t
(1 row)

select substruct('COOC'::mol,'COC |LN:1:1.3|'::mol);
 substruct 
-----------
 f
(1 row)

select substruct('COOC'::mol,mol_enumeratequery('COC |LN:1:1.3|'::mol));
WARNING:  create bndl 3
WARNING:  depickle bndl 3
WARNING:  bndl 3
 substruct 
-----------
 t
(1 row)

-- error handling
select mol_to_tautomerquery('C1'::mol);
ERROR:  could not create molecule from SMILES 'C1'
LINE 1: select mol_to_tautomerquery('C1'::mol);
                                    ^
select mol_to_tautomerquery('c1cc1'::mol);
ERROR:  MolToTautomerQuery: Can't kekulize mol.  Unkekulized atoms: 0 1 2
