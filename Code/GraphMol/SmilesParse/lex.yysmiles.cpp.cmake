#line 2 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/lex.yysmiles.cpp"

#line 4 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/lex.yysmiles.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define yysmiles__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer yysmiles__create_buffer
#endif

#ifdef yy_delete_buffer
#define yysmiles__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer yysmiles__delete_buffer
#endif

#ifdef yy_scan_buffer
#define yysmiles__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer yysmiles__scan_buffer
#endif

#ifdef yy_scan_string
#define yysmiles__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string yysmiles__scan_string
#endif

#ifdef yy_scan_bytes
#define yysmiles__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes yysmiles__scan_bytes
#endif

#ifdef yy_init_buffer
#define yysmiles__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer yysmiles__init_buffer
#endif

#ifdef yy_flush_buffer
#define yysmiles__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer yysmiles__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define yysmiles__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state yysmiles__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define yysmiles__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer yysmiles__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define yysmiles_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state yysmiles_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define yysmiles_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state yysmiles_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define yysmiles_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack yysmiles_ensure_buffer_stack
#endif

#ifdef yylex
#define yysmiles_lex_ALREADY_DEFINED
#else
#define yylex yysmiles_lex
#endif

#ifdef yyrestart
#define yysmiles_restart_ALREADY_DEFINED
#else
#define yyrestart yysmiles_restart
#endif

#ifdef yylex_init
#define yysmiles_lex_init_ALREADY_DEFINED
#else
#define yylex_init yysmiles_lex_init
#endif

#ifdef yylex_init_extra
#define yysmiles_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra yysmiles_lex_init_extra
#endif

#ifdef yylex_destroy
#define yysmiles_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy yysmiles_lex_destroy
#endif

#ifdef yyget_debug
#define yysmiles_get_debug_ALREADY_DEFINED
#else
#define yyget_debug yysmiles_get_debug
#endif

#ifdef yyset_debug
#define yysmiles_set_debug_ALREADY_DEFINED
#else
#define yyset_debug yysmiles_set_debug
#endif

#ifdef yyget_extra
#define yysmiles_get_extra_ALREADY_DEFINED
#else
#define yyget_extra yysmiles_get_extra
#endif

#ifdef yyset_extra
#define yysmiles_set_extra_ALREADY_DEFINED
#else
#define yyset_extra yysmiles_set_extra
#endif

#ifdef yyget_in
#define yysmiles_get_in_ALREADY_DEFINED
#else
#define yyget_in yysmiles_get_in
#endif

#ifdef yyset_in
#define yysmiles_set_in_ALREADY_DEFINED
#else
#define yyset_in yysmiles_set_in
#endif

#ifdef yyget_out
#define yysmiles_get_out_ALREADY_DEFINED
#else
#define yyget_out yysmiles_get_out
#endif

#ifdef yyset_out
#define yysmiles_set_out_ALREADY_DEFINED
#else
#define yyset_out yysmiles_set_out
#endif

#ifdef yyget_leng
#define yysmiles_get_leng_ALREADY_DEFINED
#else
#define yyget_leng yysmiles_get_leng
#endif

#ifdef yyget_text
#define yysmiles_get_text_ALREADY_DEFINED
#else
#define yyget_text yysmiles_get_text
#endif

#ifdef yyget_lineno
#define yysmiles_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno yysmiles_get_lineno
#endif

#ifdef yyset_lineno
#define yysmiles_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno yysmiles_set_lineno
#endif

#ifdef yyget_column
#define yysmiles_get_column_ALREADY_DEFINED
#else
#define yyget_column yysmiles_get_column
#endif

#ifdef yyset_column
#define yysmiles_set_column_ALREADY_DEFINED
#else
#define yyset_column yysmiles_set_column
#endif

#ifdef yywrap
#define yysmiles_wrap_ALREADY_DEFINED
#else
#define yywrap yysmiles_wrap
#endif

#ifdef yyget_lval
#define yysmiles_get_lval_ALREADY_DEFINED
#else
#define yyget_lval yysmiles_get_lval
#endif

#ifdef yyset_lval
#define yysmiles_set_lval_ALREADY_DEFINED
#else
#define yyset_lval yysmiles_set_lval
#endif

#ifdef yyalloc
#define yysmiles_alloc_ALREADY_DEFINED
#else
#define yyalloc yysmiles_alloc
#endif

#ifdef yyrealloc
#define yysmiles_realloc_ALREADY_DEFINED
#else
#define yyrealloc yysmiles_realloc
#endif

#ifdef yyfree
#define yysmiles_free_ALREADY_DEFINED
#else
#define yyfree yysmiles_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yysmiles_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 182
#define YY_END_OF_BUFFER 183
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[247] =
    {   0,
        0,    0,    0,    0,  183,  181,  180,  163,  177,  172,
      173,  144,  171,  170,  176,  169,  178,  179,  164,  181,
      162,    6,  123,  124,  129,  133,  132,  125,  126,  127,
      128,  174,  168,  134,  135,  136,  137,  138,  139,  167,
      146,  181,  145,  181,  123,  124,  181,  181,  129,  181,
      133,  132,   16,  181,  181,  125,  126,  127,  181,  128,
      181,   87,   20,   69,  181,   35,  181,  175,  181,  139,
      181,  165,  166,    0,    0,    0,    0,    0,    0,  131,
      130,  168,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   84,   43,   13,   90,   15,   30,

       80,   74,   51,    9,  102,   78,   92,   17,   44,   53,
       93,   91,  107,   24,   21,   50,   26,  100,  105,   61,
       63,   94,   58,   23,  109,   95,   82,   28,   59,   29,
        7,   67,   75,   62,  103,   45,   72,   32,   52,    8,
       98,   66,  111,  110,   96,   12,   22,   38,  104,   11,
       37,   55,   10,  108,   25,   97,   88,  113,   71,   86,
       77,   42,   56,   79,   54,   73,   89,   83,   33,   70,
       99,  106,   41,   81,   40,   47,   18,   31,  101,   14,
       57,   46,   34,   68,   60,   39,   48,   85,   19,   76,
       64,  112,    0,   49,   65,   27,   36,  141,  142,  140,

      143,    2,    4,    5,    3,    1,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  116,  120,  114,  122,  119,  118,  121,  117,  115,
      150,  155,  148,  153,  157,  151,  159,  158,  152,  156,
      161,  147,  154,  149,  160,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    4,    1,    5,    1,    6,    7,
        8,    9,   10,    1,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,   17,
       18,   19,    1,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,    1,    1,
       70,    1,    1,    1,    1,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[247] =
    {   0,
        0,    0,   68,    0,  272,  303,  303,  303,  303,  303,
      303,  303,  303,  246,  303,  303,  303,  303,  303,  245,
      303,  115,  189,  193,  303,  303,  303,  303,  303,  303,
      303,  303,  200,  303,  303,  303,  303,  303,  303,  303,
      303,  133,  303,   64,  120,  137,   72,   10,   20,   34,
       86,   16,  181,  143,  155,  131,   59,  169,  189,  198,
      211,  173,  303,  303,  187,  185,   82,  303,  167,   93,
      179,  303,  303,  263,  199,  193,  199,  190,  197,  303,
      303,  303,  168,  162,   38,  161,  149,  145,   77,  157,
      154,   72,  149,  135,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  225,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  303,  303,  303,  189,  176,  173,  169,
      168,  162,  157,  156,  154,  152,  145,  139,  127,  114,
       76,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303
    } ;

static const flex_int16_t yy_def[247] =
    {   0,
      246,    1,    1,    3,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,    0
    } ;

static const flex_int16_t yy_nxt[375] =
    {   0,
        6,    7,    6,    8,    9,    6,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,    6,   22,
        6,   23,   24,    6,    6,   25,    6,   26,   27,    6,
        6,    6,   28,   29,   30,    6,    6,   31,    6,    6,
        6,    6,    6,    6,    6,   32,   33,    6,    6,   34,
       35,    6,    6,    6,    6,    6,    6,    6,    6,    6,
       36,   37,   38,    6,    6,   39,    6,    6,    6,    6,
       40,   41,  124,   42,  121,  122,  136,  123,  125,  126,
      137,  245,  128,   43,  127,  129,  130,  209,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,

       56,   57,   58,  210,   59,   60,   61,   62,   63,   64,
       65,   66,   67,  158,   95,   68,   69,   74,   96,  244,
       74,  118,   97,   98,  159,  218,  219,  214,   99,  100,
      101,  102,  243,   70,   71,   75,   76,  119,  131,  132,
      133,  120,  196,  215,  242,  199,  197,  134,   77,  200,
      241,  135,   78,   79,   83,   84,   85,  240,   86,  239,
       87,  238,  237,   88,   89,   90,   91,  236,  103,   92,
       93,   94,  104,  235,  234,  105,  106,  107,  233,  150,
      151,  232,  152,  153,   80,  108,  154,  155,  109,  110,
      111,  139,  156,  157,  231,   81,  112,  113,  114,  140,

      221,  115,  116,  220,  117,  144,  145,  141,  217,  146,
      142,  143,  216,  213,  212,  147,  148,  160,  161,  211,
      162,  149,  208,  207,  206,  205,  204,  203,  163,  202,
      164,  201,  198,  165,  195,  166,  167,  168,  169,  194,
      193,  170,  171,  172,  173,  138,   82,  176,  177,  174,
      178,   81,  179,   80,  180,   73,  175,  181,  182,  184,
      185,  186,  183,  187,   72,   74,  188,  189,   74,  190,
      191,  246,  246,  246,  222,  246,  192,  246,  246,  246,
      223,  246,  246,   75,   76,  224,  225,  226,  227,  246,
      228,  229,  230,  246,  246,  246,   77,  246,  246,  246,

       78,   79,    5,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246
    } ;

static const flex_int16_t yy_chk[375] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,   49,    3,   48,   48,   52,   48,   49,   49,
       52,  221,   50,    3,   49,   50,   50,   85,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,   85,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   57,   44,    3,    3,   22,   44,  220,
       22,   47,   44,   44,   57,   92,   92,   89,   44,   44,
       44,   44,  219,    3,    3,   22,   22,   47,   51,   51,
       51,   47,   67,   89,  218,   70,   67,   51,   22,   70,
      217,   51,   22,   22,   42,   42,   42,  216,   42,  215,
       42,  214,  213,   42,   42,   42,   42,  212,   45,   42,
       42,   42,   45,  211,  210,   45,   45,   45,  209,   56,
       56,  208,   56,   56,   45,   46,   56,   56,   46,   46,
       46,   54,   56,   56,  207,   46,   46,   46,   46,   54,

       94,   46,   46,   93,   46,   55,   55,   54,   91,   55,
       54,   54,   90,   88,   87,   55,   55,   58,   58,   86,
       58,   55,   84,   83,   79,   78,   77,   76,   58,   75,
       58,   71,   69,   58,   66,   58,   58,   59,   59,   65,
       62,   59,   59,   59,   59,   53,   33,   60,   60,   59,
       60,   24,   60,   23,   60,   20,   59,   60,   60,   61,
       61,   61,   60,   61,   14,   74,   61,   61,   74,   61,
       61,    5,    0,    0,  193,    0,   61,    0,    0,    0,
      193,    0,    0,   74,   74,  193,  193,  193,  193,    0,
      193,  193,  193,    0,    0,    0,   74,    0,    0,    0,

       74,   74,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "smiles.ll"
#line 6 "smiles.ll"

// $Id$
//
//  Copyright (C) 2001-2010 Randal Henne, Greg Landrum and Rational Discovery LLC
//
//   @@ All Rights Reserved  @@
//

#if defined(__CYGWIN__) && !defined(fileno)
// -std=c++11 turns off recent posix features
extern "C" int fileno(FILE*);
#endif

#include <cstdio>
#ifdef WIN32
#include <io.h>
#endif

#include <RDGeneral/Exceptions.h>
#include <RDGeneral/types.h>
#include <GraphMol/GraphMol.h>
#include <GraphMol/Atom.h>
#include <GraphMol/Bond.h>
#include <GraphMol/PeriodicTable.h>
#include <GraphMol/RDKitQueries.h>

#include <string>
#include <cstring>
#include "smiles.tab.hpp"

using namespace RDKit;

#define YY_FATAL_ERROR(msg) smiles_lexer_error(msg)

void smiles_lexer_error(const char *msg) {
     BOOST_LOG(rdErrorLog) << msg<<std::endl;
     throw ValueErrorException(msg);
}

size_t setup_smiles_string(const std::string &text,yyscan_t yyscanner){
//  YY_BUFFER_STATE buff=yysmiles__scan_string(text.c_str()+pos,yyscanner);
  // Faster implementation of yysmiles__scan_string that handles trimming
  YY_BUFFER_STATE b;
  char *buf;
  yyconst char * yybytes = text.c_str();
  yy_size_t _yybytes_len=text.size(), n, start, end;
  /* Get memory for full buffer, including space for trailing EOB's. */
  n = _yybytes_len + 2;
  buf = (char *) yysmiles_alloc(n ,yyscanner );
  if ( ! buf )
    smiles_lexer_error( "out of dynamic memory in yysmiles__scan_bytes()" );

  // ltrim

  for(start = 0 ; start < _yybytes_len; ++start) {
    if (yybytes[start] > 32) break;
  }
  for(end = _yybytes_len ; end > start; --end) {
    if (yybytes[end] > 32) break;
  }

  _yybytes_len = end-start+1;
  n = _yybytes_len + 2;
  memcpy(buf, yybytes+start, _yybytes_len);


  buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

  b = yysmiles__scan_buffer(buf,n ,yyscanner);
  if ( ! b )
    smiles_lexer_error( "bad buffer in yysmiles__scan_bytes()" );

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;


  POSTCONDITION(b,"invalid buffer");
  return start;

}
#line 892 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/lex.yysmiles.cpp"

#line 894 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/lex.yysmiles.cpp"

#define INITIAL 0
#define IN_ATOM_STATE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 91 "smiles.ll"



#line 95 "smiles.ll"
  if (start_token)
    {
      int t = start_token;
      start_token = 0;
      return t;
    }


#line 1182 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/lex.yysmiles.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 247 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 303 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 104 "smiles.ll"
case 2:
#line 105 "smiles.ll"
case 3:
#line 106 "smiles.ll"
case 4:
#line 107 "smiles.ll"
case 5:
YY_RULE_SETUP
#line 107 "smiles.ll"
{ return CHI_CLASS_TOKEN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 109 "smiles.ll"
{ return AT_TOKEN; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 112 "smiles.ll"
{ yylval->atom = new Atom(2); return ATOM_TOKEN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 113 "smiles.ll"
{ yylval->atom = new Atom(3); return ATOM_TOKEN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 114 "smiles.ll"
{ yylval->atom = new Atom(4); return ATOM_TOKEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 115 "smiles.ll"
{ yylval->atom = new Atom(10); return ATOM_TOKEN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 116 "smiles.ll"
{ yylval->atom = new Atom(11); return ATOM_TOKEN; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 117 "smiles.ll"
{ yylval->atom = new Atom(12); return ATOM_TOKEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 118 "smiles.ll"
{ yylval->atom = new Atom(13); return ATOM_TOKEN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 119 "smiles.ll"
{ yylval->atom = new Atom(14); return ATOM_TOKEN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 120 "smiles.ll"
{ yylval->atom = new Atom(18); return ATOM_TOKEN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 121 "smiles.ll"
{ yylval->atom = new Atom(19); return ATOM_TOKEN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 122 "smiles.ll"
{ yylval->atom = new Atom(20); return ATOM_TOKEN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 123 "smiles.ll"
{ yylval->atom = new Atom(21); return ATOM_TOKEN; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 124 "smiles.ll"
{ yylval->atom = new Atom(22); return ATOM_TOKEN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 125 "smiles.ll"
{ yylval->atom = new Atom(23); return ATOM_TOKEN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 126 "smiles.ll"
{ yylval->atom = new Atom(24); return ATOM_TOKEN; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 127 "smiles.ll"
{ yylval->atom = new Atom(25); return ATOM_TOKEN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 128 "smiles.ll"
{ yylval->atom = new Atom(26); return ATOM_TOKEN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 129 "smiles.ll"
{ yylval->atom = new Atom(27); return ATOM_TOKEN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 130 "smiles.ll"
{ yylval->atom = new Atom(28); return ATOM_TOKEN; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 131 "smiles.ll"
{ yylval->atom = new Atom(29); return ATOM_TOKEN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 132 "smiles.ll"
{ yylval->atom = new Atom(30); return ATOM_TOKEN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 133 "smiles.ll"
{ yylval->atom = new Atom(31); return ATOM_TOKEN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 134 "smiles.ll"
{ yylval->atom = new Atom(32); return ATOM_TOKEN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 135 "smiles.ll"
{ yylval->atom = new Atom(33); return ATOM_TOKEN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "smiles.ll"
{ yylval->atom = new Atom(34); return ATOM_TOKEN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "smiles.ll"
{ yylval->atom = new Atom(36); return ATOM_TOKEN; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "smiles.ll"
{ yylval->atom = new Atom(37); return ATOM_TOKEN; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "smiles.ll"
{ yylval->atom = new Atom(38); return ATOM_TOKEN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 140 "smiles.ll"
{ yylval->atom = new Atom(39); return ATOM_TOKEN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 141 "smiles.ll"
{ yylval->atom = new Atom(40); return ATOM_TOKEN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 142 "smiles.ll"
{ yylval->atom = new Atom(41); return ATOM_TOKEN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 143 "smiles.ll"
{ yylval->atom = new Atom(42); return ATOM_TOKEN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 144 "smiles.ll"
{ yylval->atom = new Atom(43); return ATOM_TOKEN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 145 "smiles.ll"
{ yylval->atom = new Atom(44); return ATOM_TOKEN; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 146 "smiles.ll"
{ yylval->atom = new Atom(45); return ATOM_TOKEN; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 147 "smiles.ll"
{ yylval->atom = new Atom(46); return ATOM_TOKEN; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 148 "smiles.ll"
{ yylval->atom = new Atom(47); return ATOM_TOKEN; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 149 "smiles.ll"
{ yylval->atom = new Atom(48); return ATOM_TOKEN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 150 "smiles.ll"
{ yylval->atom = new Atom(49); return ATOM_TOKEN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 151 "smiles.ll"
{ yylval->atom = new Atom(50); return ATOM_TOKEN; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 152 "smiles.ll"
{ yylval->atom = new Atom(51); return ATOM_TOKEN; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 153 "smiles.ll"
{ yylval->atom = new Atom(52); return ATOM_TOKEN; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 154 "smiles.ll"
{ yylval->atom = new Atom(54); return ATOM_TOKEN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 155 "smiles.ll"
{ yylval->atom = new Atom(55); return ATOM_TOKEN; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 156 "smiles.ll"
{ yylval->atom = new Atom(56); return ATOM_TOKEN; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 157 "smiles.ll"
{ yylval->atom = new Atom(57); return ATOM_TOKEN; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 158 "smiles.ll"
{ yylval->atom = new Atom(58); return ATOM_TOKEN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 159 "smiles.ll"
{ yylval->atom = new Atom(59); return ATOM_TOKEN; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 160 "smiles.ll"
{ yylval->atom = new Atom(60); return ATOM_TOKEN; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 161 "smiles.ll"
{ yylval->atom = new Atom(61); return ATOM_TOKEN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 162 "smiles.ll"
{ yylval->atom = new Atom(62); return ATOM_TOKEN; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 163 "smiles.ll"
{ yylval->atom = new Atom(63); return ATOM_TOKEN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 164 "smiles.ll"
{ yylval->atom = new Atom(64); return ATOM_TOKEN; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 165 "smiles.ll"
{ yylval->atom = new Atom(65); return ATOM_TOKEN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 166 "smiles.ll"
{ yylval->atom = new Atom(66); return ATOM_TOKEN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 167 "smiles.ll"
{ yylval->atom = new Atom(67); return ATOM_TOKEN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 168 "smiles.ll"
{ yylval->atom = new Atom(68); return ATOM_TOKEN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 169 "smiles.ll"
{ yylval->atom = new Atom(69); return ATOM_TOKEN; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 170 "smiles.ll"
{ yylval->atom = new Atom(70); return ATOM_TOKEN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 171 "smiles.ll"
{ yylval->atom = new Atom(71); return ATOM_TOKEN; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 172 "smiles.ll"
{ yylval->atom = new Atom(72); return ATOM_TOKEN; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 173 "smiles.ll"
{ yylval->atom = new Atom(73); return ATOM_TOKEN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 174 "smiles.ll"
{ yylval->atom = new Atom(74); return ATOM_TOKEN; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 175 "smiles.ll"
{ yylval->atom = new Atom(75); return ATOM_TOKEN; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 176 "smiles.ll"
{ yylval->atom = new Atom(76); return ATOM_TOKEN; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 177 "smiles.ll"
{ yylval->atom = new Atom(77); return ATOM_TOKEN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 178 "smiles.ll"
{ yylval->atom = new Atom(78); return ATOM_TOKEN; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 179 "smiles.ll"
{ yylval->atom = new Atom(79); return ATOM_TOKEN; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 180 "smiles.ll"
{ yylval->atom = new Atom(80); return ATOM_TOKEN; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 181 "smiles.ll"
{ yylval->atom = new Atom(81); return ATOM_TOKEN; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 182 "smiles.ll"
{ yylval->atom = new Atom(82); return ATOM_TOKEN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 183 "smiles.ll"
{ yylval->atom = new Atom(83); return ATOM_TOKEN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 184 "smiles.ll"
{ yylval->atom = new Atom(84); return ATOM_TOKEN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 185 "smiles.ll"
{ yylval->atom = new Atom(85); return ATOM_TOKEN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 186 "smiles.ll"
{ yylval->atom = new Atom(86); return ATOM_TOKEN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 187 "smiles.ll"
{ yylval->atom = new Atom(87); return ATOM_TOKEN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 188 "smiles.ll"
{ yylval->atom = new Atom(88); return ATOM_TOKEN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 189 "smiles.ll"
{ yylval->atom = new Atom(89); return ATOM_TOKEN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 190 "smiles.ll"
{ yylval->atom = new Atom(90); return ATOM_TOKEN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 191 "smiles.ll"
{ yylval->atom = new Atom(91); return ATOM_TOKEN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 192 "smiles.ll"
{ yylval->atom = new Atom(92); return ATOM_TOKEN; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 193 "smiles.ll"
{ yylval->atom = new Atom(93); return ATOM_TOKEN; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 194 "smiles.ll"
{ yylval->atom = new Atom(94); return ATOM_TOKEN; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 195 "smiles.ll"
{ yylval->atom = new Atom(95); return ATOM_TOKEN; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 196 "smiles.ll"
{ yylval->atom = new Atom(96); return ATOM_TOKEN; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 197 "smiles.ll"
{ yylval->atom = new Atom(97); return ATOM_TOKEN; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 198 "smiles.ll"
{ yylval->atom = new Atom(98); return ATOM_TOKEN; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 199 "smiles.ll"
{ yylval->atom = new Atom(99); return ATOM_TOKEN; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 200 "smiles.ll"
{ yylval->atom = new Atom(100); return ATOM_TOKEN; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 201 "smiles.ll"
{ yylval->atom = new Atom(101); return ATOM_TOKEN; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 202 "smiles.ll"
{ yylval->atom = new Atom(102); return ATOM_TOKEN; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 203 "smiles.ll"
{ yylval->atom = new Atom(103); return ATOM_TOKEN; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 204 "smiles.ll"
{ yylval->atom = new Atom(104); return ATOM_TOKEN; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 205 "smiles.ll"
{ yylval->atom = new Atom(105); return ATOM_TOKEN; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 206 "smiles.ll"
{ yylval->atom = new Atom(106); return ATOM_TOKEN; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 207 "smiles.ll"
{ yylval->atom = new Atom(107); return ATOM_TOKEN; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 208 "smiles.ll"
{ yylval->atom = new Atom(108); return ATOM_TOKEN; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 209 "smiles.ll"
{ yylval->atom = new Atom(109); return ATOM_TOKEN; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 210 "smiles.ll"
{ yylval->atom = new Atom(110); return ATOM_TOKEN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 211 "smiles.ll"
{ yylval->atom = new Atom(111); return ATOM_TOKEN; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 212 "smiles.ll"
{ yylval->atom = new Atom(112); return ATOM_TOKEN; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 213 "smiles.ll"
{ yylval->atom = new Atom(113); return ATOM_TOKEN; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 214 "smiles.ll"
{ yylval->atom = new Atom(114); return ATOM_TOKEN; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 215 "smiles.ll"
{ yylval->atom = new Atom(115); return ATOM_TOKEN; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 216 "smiles.ll"
{ yylval->atom = new Atom(116); return ATOM_TOKEN; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 217 "smiles.ll"
{ yylval->atom = new Atom(117); return ATOM_TOKEN; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 218 "smiles.ll"
{ yylval->atom = new Atom(118); return ATOM_TOKEN; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 220 "smiles.ll"
{ yylval->atom = new Atom(110); return ATOM_TOKEN; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 221 "smiles.ll"
{ yylval->atom = new Atom(111); return ATOM_TOKEN; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 222 "smiles.ll"
{ yylval->atom = new Atom(112); return ATOM_TOKEN; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 223 "smiles.ll"
{ yylval->atom = new Atom(113); return ATOM_TOKEN; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 224 "smiles.ll"
{ yylval->atom = new Atom(114); return ATOM_TOKEN; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 225 "smiles.ll"
{ yylval->atom = new Atom(115); return ATOM_TOKEN; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 226 "smiles.ll"
{ yylval->atom = new Atom(116); return ATOM_TOKEN; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 227 "smiles.ll"
{ yylval->atom = new Atom(117); return ATOM_TOKEN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 228 "smiles.ll"
{ yylval->atom = new Atom(118); return ATOM_TOKEN; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 230 "smiles.ll"
{ yylval->atom = new Atom(5);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 231 "smiles.ll"
{ yylval->atom = new Atom(6);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 232 "smiles.ll"
{ yylval->atom = new Atom(7);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 233 "smiles.ll"
{ yylval->atom = new Atom(8);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 234 "smiles.ll"
{ yylval->atom = new Atom(15);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "smiles.ll"
{ yylval->atom = new Atom(16);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 236 "smiles.ll"
{ yylval->atom = new Atom(9);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 237 "smiles.ll"
{ yylval->atom = new Atom(17);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 238 "smiles.ll"
{ yylval->atom = new Atom(35);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 239 "smiles.ll"
{ yylval->atom = new Atom(53);return ORGANIC_ATOM_TOKEN; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 241 "smiles.ll"
{
				return H_TOKEN;
			}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 245 "smiles.ll"
{	yylval->atom = new Atom ( 5 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 249 "smiles.ll"
{	yylval->atom = new Atom ( 6 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 253 "smiles.ll"
{	yylval->atom = new Atom( 7 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 257 "smiles.ll"
{	yylval->atom = new Atom( 8 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 261 "smiles.ll"
{	yylval->atom = new Atom( 15 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 265 "smiles.ll"
{	yylval->atom = new Atom( 16 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 270 "smiles.ll"
{	yylval->atom = new Atom( 14 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 274 "smiles.ll"
{	yylval->atom = new Atom( 33 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 278 "smiles.ll"
{	yylval->atom = new Atom( 34 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 282 "smiles.ll"
{	yylval->atom = new Atom( 52 );
			yylval->atom->setIsAromatic(true);
				return AROMATIC_ATOM_TOKEN;
			}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 287 "smiles.ll"
{   yylval->atom = new Atom( 0 );
		            yylval->atom->setProp(common_properties::dummyLabel,
                                                        std::string("*"));
                                // must be ORGANIC_ATOM_TOKEN because
                                // we aren't in square brackets:
				return ORGANIC_ATOM_TOKEN;
			}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 295 "smiles.ll"
{ return COLON_TOKEN; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 297 "smiles.ll"
{ return HASH_TOKEN; }
	YY_BREAK

  // The next block is a workaround for a pathlogy in the SMILES produced
  // by some Biovia tools

case 147:
YY_RULE_SETUP
#line 304 "smiles.ll"
{ yylval->atom = new Atom(104); return ATOM_TOKEN; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 305 "smiles.ll"
{ yylval->atom = new Atom(105); return ATOM_TOKEN; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 306 "smiles.ll"
{ yylval->atom = new Atom(106); return ATOM_TOKEN; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 307 "smiles.ll"
{ yylval->atom = new Atom(107); return ATOM_TOKEN; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 308 "smiles.ll"
{ yylval->atom = new Atom(108); return ATOM_TOKEN; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 309 "smiles.ll"
{ yylval->atom = new Atom(109); return ATOM_TOKEN; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 310 "smiles.ll"
{ yylval->atom = new Atom(110); return ATOM_TOKEN; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 311 "smiles.ll"
{ yylval->atom = new Atom(111); return ATOM_TOKEN; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 312 "smiles.ll"
{ yylval->atom = new Atom(112); return ATOM_TOKEN; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 313 "smiles.ll"
{ yylval->atom = new Atom(113); return ATOM_TOKEN; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 314 "smiles.ll"
{ yylval->atom = new Atom(114); return ATOM_TOKEN; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 315 "smiles.ll"
{ yylval->atom = new Atom(115); return ATOM_TOKEN; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 316 "smiles.ll"
{ yylval->atom = new Atom(116); return ATOM_TOKEN; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 317 "smiles.ll"
{ yylval->atom = new Atom(117); return ATOM_TOKEN; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 318 "smiles.ll"
{ yylval->atom = new Atom(118); return ATOM_TOKEN; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 320 "smiles.ll"
{ yylval->bond = new Bond(Bond::DOUBLE);
	  return BOND_TOKEN; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 322 "smiles.ll"
{ yylval->bond = new Bond(Bond::TRIPLE);
	  return BOND_TOKEN; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 324 "smiles.ll"
{ yylval->bond = new Bond(Bond::AROMATIC);
	  yylval->bond->setIsAromatic(true);
	  return BOND_TOKEN; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 327 "smiles.ll"
{ yylval->bond = new Bond(Bond::DATIVER);
	  return BOND_TOKEN; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 329 "smiles.ll"
{ yylval->bond = new Bond(Bond::DATIVEL);
	  return BOND_TOKEN; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 331 "smiles.ll"
{ yylval->bond = new QueryBond();
	  yylval->bond->setQuery(makeBondNullQuery());
	  return BOND_TOKEN;  }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 335 "smiles.ll"
{ yylval->bond = new Bond(Bond::UNSPECIFIED);
	yylval->bond->setProp(RDKit::common_properties::_unspecifiedOrder,1);
	yylval->bond->setBondDir(Bond::ENDDOWNRIGHT);
	return BOND_TOKEN;  }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 340 "smiles.ll"
{ yylval->bond = new Bond(Bond::UNSPECIFIED);
	yylval->bond->setProp(RDKit::common_properties::_unspecifiedOrder,1);
	yylval->bond->setBondDir(Bond::ENDUPRIGHT);
	return BOND_TOKEN;  }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 345 "smiles.ll"
{ return MINUS_TOKEN; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 347 "smiles.ll"
{ return PLUS_TOKEN; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 349 "smiles.ll"
{ return GROUP_OPEN_TOKEN; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 350 "smiles.ll"
{ return GROUP_CLOSE_TOKEN; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 353 "smiles.ll"
{ BEGIN IN_ATOM_STATE; return ATOM_OPEN_TOKEN; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 354 "smiles.ll"
{ BEGIN INITIAL; return ATOM_CLOSE_TOKEN; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 356 "smiles.ll"
{ return SEPARATOR_TOKEN; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 358 "smiles.ll"
{ return PERCENT_TOKEN; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 360 "smiles.ll"
{ yylval->ival = 0; return ZERO_TOKEN; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 361 "smiles.ll"
{ yylval->ival = atoi( yytext ); return NONZERO_DIGIT_TOKEN; }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 365 "smiles.ll"
return 0;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_ATOM_STATE):
#line 367 "smiles.ll"
{ return EOS_TOKEN; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 368 "smiles.ll"
return yytext[0];
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 370 "smiles.ll"
ECHO;
	YY_BREAK
#line 2199 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/lex.yysmiles.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 247 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 247 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 246);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 370 "smiles.ll"


#undef yysmiles_wrap
int yysmiles_wrap( void ) { return 1; }

